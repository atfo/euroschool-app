{
  "_args": [
    [
      "git+https://github.com/yamill/react-native-orientation.git",
      "C:\\users\\vidminas\\github\\euroschool-app"
    ]
  ],
  "_from": "git+https://github.com/yamill/react-native-orientation.git",
  "_id": "react-native-orientation@1.17.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-orientation",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/yamill/react-native-orientation/master/package.json",
      "gitUrl": "git://github.com/yamill/react-native-orientation.git",
      "httpsUrl": "git+https://github.com/yamill/react-native-orientation.git",
      "shortcut": "github:yamill/react-native-orientation",
      "ssh": "git@github.com:yamill/react-native-orientation.git",
      "sshUrl": "git+ssh://git@github.com/yamill/react-native-orientation.git",
      "type": "github"
    },
    "name": null,
    "raw": "git+https://github.com/yamill/react-native-orientation.git",
    "rawSpec": "git+https://github.com/yamill/react-native-orientation.git",
    "scope": null,
    "spec": "git+https://github.com/yamill/react-native-orientation.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/yamill/react-native-orientation.git#278291739e2b7c8ab208fdf404e4b139e24b4a3f",
  "_shasum": "836e12739d16338af37c06b18df729e4ad80386a",
  "_shrinkwrap": null,
  "_spec": "git+https://github.com/yamill/react-native-orientation.git",
  "_where": "C:\\users\\vidminas\\github\\euroschool-app",
  "author": {
    "email": "yamill@gmail.com",
    "name": "Yamill Vallecillo",
    "url": "github.com/yamill"
  },
  "bugs": {
    "url": "https://github.com/yamill/react-native-orientation/issues"
  },
  "dependencies": {},
  "description": "Listen to device orientation changes in react-native and set preferred orientation on screen to screen basis",
  "devDependencies": {},
  "gitHead": "278291739e2b7c8ab208fdf404e4b139e24b4a3f",
  "homepage": "https://github.com/yamill/react-native-orientation#readme",
  "keywords": [
    "android",
    "ios",
    "orientation",
    "react-component",
    "react-native"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "react-native-orientation",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": ">=0.5"
  },
  "readme": "## react-native-orientation\r\nListen to device orientation changes in react-native and set preferred orientation on screen to screen basis.\r\n\r\n### Installation\r\n\r\n#### via rnpm\r\n\r\nRun `rnpm install react-native-orientation`\r\n\r\n> Note: rnpm will install and link the library automatically.\r\n\r\n#### via npm\r\n\r\nRun `npm install react-native-orientation --save`\r\n\r\n### Linking\r\n\r\n#### Using rnpm (iOS + Android)\r\n\r\n`rnpm link react-native-orientation`\r\n\r\n#### Using [CocoaPods](https://cocoapods.org) (iOS Only)\r\n\r\n`pod 'react-native-orientation', :path => 'node_modules/react-native-orientation'`\r\n\r\nConsult the React Native documentation on how to [install React Native using CocoaPods](https://facebook.github.io/react-native/docs/embedded-app-ios.html#install-react-native-using-cocoapods).\r\n\r\n#### Manually\r\n\r\n**iOS**\r\n\r\n1. Add `node_modules/react-native-orientation/iOS/RCTOrientation.xcodeproj` to your xcode project, usually under the `Libraries` group\r\n1. Add `libRCTOrientation.a` (from `Products` under `RCTOrientation.xcodeproj`) to build target's `Linked Frameworks and Libraries` list\r\n\r\n\r\n**Android**\r\n\r\n1. In `android/setting.gradle`\r\n\r\n    ```\r\n    ...\r\n    include ':react-native-orientation', ':app'\r\n    project(':react-native-orientation').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-orientation/android')\r\n    ```\r\n\r\n2. In `android/app/build.gradle`\r\n\r\n    ```\r\n    ...\r\n    dependencies {\r\n        ...\r\n        compile project(':react-native-orientation')\r\n    }\r\n    ```\r\n\r\n3. Register module (in MainApplication.java)\r\n\r\n    ```\r\n    import com.github.yamill.orientation.OrientationPackage;  // <--- import\r\n\r\n    public class MainApplication extends Application implements ReactApplication {\r\n      ......\r\n\r\n      @Override\r\n      protected List<ReactPackage> getPackages() {\r\n          return Arrays.<ReactPackage>asList(\r\n              new MainReactPackage(),\r\n              new OrientationPackage()      <------- Add this\r\n          );\r\n      }\r\n\r\n      ......\r\n\r\n    }\r\n    ```\r\n\r\n### Configuration\r\n\r\n#### iOS\r\n\r\nAdd the following to your project's `AppDelegate.m`:\r\n\r\n```objc\r\n#import \"Orientation.h\" // <--- import\r\n\r\n@implementation AppDelegate\r\n\r\n  // ...\r\n\r\n  - (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window {\r\n    return [Orientation getOrientation];\r\n  }\r\n\r\n@end\r\n```\r\n\r\n#### Android\r\n\r\nImplement onConfigurationChanged method (in MainActivity.java)\r\n\r\n```\r\n    import android.content.Intent; // <--- import\r\n    import android.content.res.Configuration; // <--- import\r\n\r\n    public class MainActivity extends ReactActivity {\r\n      ......\r\n      @Override\r\n      public void onConfigurationChanged(Configuration newConfig) {\r\n        super.onConfigurationChanged(newConfig);\r\n        Intent intent = new Intent(\"onConfigurationChanged\");\r\n        intent.putExtra(\"newConfig\", newConfig);\r\n        this.sendBroadcast(intent);\r\n    }\r\n\r\n      ......\r\n\r\n    }\r\n```\r\n\r\n## Usage\r\n\r\nWhenever you want to use it within React Native code now you can:\r\n`var Orientation = require('react-native-orientation');`\r\n\r\n```javascript\r\n  _orientationDidChange: function(orientation) {\r\n    if (orientation == 'LANDSCAPE') {\r\n      //do something with landscape layout\r\n    } else {\r\n      //do something with portrait layout\r\n    }\r\n  },\r\n\r\n  componentWillMount: function() {\r\n    //The getOrientation method is async. It happens sometimes that\r\n    //you need the orientation at the moment the js starts running on device.\r\n    //getInitialOrientation returns directly because its a constant set at the\r\n    //beginning of the js code.\r\n    var initial = Orientation.getInitialOrientation();\r\n    if (initial === 'PORTRAIT') {\r\n      //do stuff\r\n    } else {\r\n      //do other stuff\r\n    }\r\n  },\r\n\r\n  componentDidMount: function() {\r\n    Orientation.lockToPortrait(); //this will lock the view to Portrait\r\n    //Orientation.lockToLandscape(); //this will lock the view to Landscape\r\n    //Orientation.unlockAllOrientations(); //this will unlock the view to all Orientations\r\n\r\n    Orientation.addOrientationListener(this._orientationDidChange);\r\n  },\r\n\r\n  componentWillUnmount: function() {\r\n    Orientation.getOrientation((err,orientation)=> {\r\n      console.log(\"Current Device Orientation: \", orientation);\r\n    });\r\n    Orientation.removeOrientationListener(this._orientationDidChange);\r\n  }\r\n```\r\n\r\n## Events\r\n\r\n- `addOrientationListener(function(orientation))`\r\n\r\norientation can return either `LANDSCAPE` `PORTRAIT` `UNKNOWN`\r\nalso `PORTRAITUPSIDEDOWN` is now different from `PORTRAIT`\r\n\r\n- `removeOrientationListener(function(orientation))`\r\n\r\n- `addSpecificOrientationListener(function(specificOrientation))`\r\n\r\nspecificOrientation can return either `LANDSCAPE-LEFT` `LANDSCAPE-RIGHT` `PORTRAIT` `UNKNOWN` `PORTRAITUPSIDEDOWN`\r\n\r\n- `removeSpecificOrientationListener(function(specificOrientation))`\r\n\r\n## Functions\r\n\r\n- `lockToPortrait()`\r\n- `lockToLandscape()`\r\n- `lockToLandscapeLeft()`\r\n- `lockToLandscapeRight()`\r\n- `unlockAllOrientations()`\r\n- `getOrientation(function(err, orientation)`\r\n\r\norientation can return either `LANDSCAPE` `PORTRAIT` `UNKNOWN` `PORTRAITUPSIDEDOWN`\r\n\r\n- `getSpecificOrientation(function(err, specificOrientation)`\r\n\r\nspecificOrientation can return either `LANDSCAPE-LEFT` `LANDSCAPE-RIGHT` `PORTRAIT` `UNKNOWN` `PORTRAITUPSIDEDOWN`\r\n\r\n## TODOS\r\n\r\n- [x] Add some way to allow setting a preferred orientation on a screen by screen basis.\r\n- [x] Make API Cleaner to Orientation Locking\r\n- [x] Android Support\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yamill/react-native-orientation.git"
  },
  "rnpm": {
    "android": {
      "packageInstance": "new OrientationPackage()"
    },
    "ios": {
      "project": "iOS/RCTOrientation.xcodeproj"
    }
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.17.0"
}
