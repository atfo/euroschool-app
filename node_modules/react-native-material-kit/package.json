{
  "_args": [
    [
      "git+https://github.com/xinthink/react-native-material-kit.git",
      "C:\\users\\vidminas\\github\\euroschool-app"
    ]
  ],
  "_from": "git+https://github.com/xinthink/react-native-material-kit.git",
  "_id": "react-native-material-kit@0.3.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-material-kit",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/xinthink/react-native-material-kit/master/package.json",
      "gitUrl": "git://github.com/xinthink/react-native-material-kit.git",
      "httpsUrl": "git+https://github.com/xinthink/react-native-material-kit.git",
      "shortcut": "github:xinthink/react-native-material-kit",
      "ssh": "git@github.com:xinthink/react-native-material-kit.git",
      "sshUrl": "git+ssh://git@github.com/xinthink/react-native-material-kit.git",
      "type": "github"
    },
    "name": null,
    "raw": "git+https://github.com/xinthink/react-native-material-kit.git",
    "rawSpec": "git+https://github.com/xinthink/react-native-material-kit.git",
    "scope": null,
    "spec": "git+https://github.com/xinthink/react-native-material-kit.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/xinthink/react-native-material-kit.git#6eb7e11e8c908358796e7c74afebc5b3eee258b2",
  "_shasum": "e020132c30e582ed771566c5411084c936473d41",
  "_shrinkwrap": null,
  "_spec": "git+https://github.com/xinthink/react-native-material-kit.git",
  "_where": "C:\\users\\vidminas\\github\\euroschool-app",
  "author": {
    "email": "yingxinwu.g@gmail.com",
    "name": "Yingxin Wu"
  },
  "bugs": {
    "url": "https://github.com/xinthink/react-native-material-kit/issues"
  },
  "contributors": [
    {
      "name": "Quentin Valmori",
      "url": "https://github.com/Crash--"
    },
    {
      "name": "Alexander Price",
      "url": "https://github.com/alexprice91"
    }
  ],
  "dependencies": {
    "ramda": "^0.21.0"
  },
  "description": "Bringing Material Design to React Native",
  "devDependencies": {
    "babel-eslint": "^6.0.2",
    "eslint": "^2.9.0",
    "eslint-config-airbnb": "^6.2.0",
    "eslint-plugin-react": "^4.3.0",
    "gulp": "^3.9.0",
    "gulp-docco": "0.0.4"
  },
  "gitHead": "6eb7e11e8c908358796e7c74afebc5b3eee258b2",
  "homepage": "https://github.com/xinthink/react-native-material-kit",
  "keywords": [
    "MaterialKit",
    "android",
    "ios",
    "material design",
    "native",
    "react",
    "react-component",
    "react-native",
    "react-native-component"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-native-material-kit",
  "optionalDependencies": {},
  "readme": "[![npm][npm-badge]][npm]\r\n[![react-native][rn-badge]][rn]\r\n[![MIT][license-badge]][license]\r\n[![bitHound Score][bithound-badge]][bithound]\r\n[![Gitter][gitter-badge]][gitter-rnmk]\r\n\r\n\r\nA set of UI components, in the purpose of introducing [Material Design][md] to apps built with [React Native][rn], quickly and painlessly.\r\n\r\n[npm-badge]: https://img.shields.io/npm/v/react-native-material-kit.svg\r\n[npm]: https://www.npmjs.com/package/react-native-material-kit\r\n[rn-badge]: https://img.shields.io/badge/react--native-v0.27.x-05A5D1.svg\r\n[rn]: https://facebook.github.io/react-native\r\n[md]: http://www.google.com/design/spec/material-design/introduction.html\r\n[license-badge]: https://img.shields.io/dub/l/vibe-d.svg\r\n[license]: https://raw.githubusercontent.com/xinthink/react-native-material-kit/master/LICENSE.md\r\n[bithound-badge]: https://www.bithound.io/github/xinthink/react-native-material-kit/badges/score.svg\r\n[bithound]: https://www.bithound.io/github/xinthink/react-native-material-kit\r\n[gitter-badge]: https://img.shields.io/gitter/room/xinthink/react-native-material-kit.svg\r\n[gitter-rnmk]: https://gitter.im/xinthink/react-native-material-kit\r\n\r\n## Getting Started\r\n\r\nFirst, `cd` to your RN project directory, and install RNMK through [rnpm](https://github.com/rnpm/rnpm) . If you don't have rnpm, you can install RNMK from npm with the command `npm i -S react-native-material-kit` and link it manually (see below).\r\n\r\n### iOS\r\n\r\n* ####React Native < 0.29 (Using rnpm)\r\n\r\n  `rnpm install react-native-material-kit`\r\n  \r\n* ####React Native >= 0.29\r\n  `$npm install -S react-native-material-kit`\r\n\r\n  `$react-native link react-native-material-kit`\r\n  \r\n\r\n\r\n#### Manually\r\n1. Add `node_modules/react-native-material-kit/iOS/RCTMaterialKit.xcodeproj` to your xcode project, usually under the `Libraries` group\r\n1. Add `libRCTMaterialKit.a` (from `Products` under `RCTMaterialKit.xcodeproj`) to build target's `Linked Frameworks and Libraries` list\r\n\r\n#### Option: Using [CocoaPods](https://cocoapods.org)\r\n\r\nAssuming you have [CocoaPods](https://cocoapods.org) installed, create a `PodFile` like this in your app's project directory. You can leave out the modules you don't need.\r\n\r\n```ruby\r\nxcodeproj 'path/to/YourProject.xcodeproj/'\r\n\r\npod 'React', :subspecs => ['Core', 'RCTText', 'RCTWebSocket'], :path => 'node_modules/react-native'\r\npod 'react-native-material-kit', :path => 'node_modules/react-native-material-kit'\r\n\r\npost_install do |installer|\r\n  target = installer.pods_project.targets.select{|t| 'React' == t.name}.first\r\n  phase = target.new_shell_script_build_phase('Run Script')\r\n  phase.shell_script = \"if nc -w 5 -z localhost 8081 ; then\\n  if ! curl -s \\\"http://localhost:8081/status\\\" | grep -q \\\"packager-status:running\\\" ; then\\n    echo \\\"Port 8081 already in use, packager is either not running or not running correctly\\\"\\n    exit 2\\n  fi\\nelse\\n  open $SRCROOT/../node_modules/react-native/packager/launchPackager.command || echo \\\"Can't start packager automatically\\\"\\nfi\"\r\nend\r\n```\r\n\r\nNow run `pod install`. This will create an Xcode workspace containing all necessary native files, including react-native-material-kit. From now on open `YourProject.xcworkspace` instead of `YourProject.xcodeproject` in Xcode. Because React Native's iOS code is now pulled in via CocoaPods, you also need to remove the `React`, `RCTImage`, etc. subprojects from your app's Xcode project, in case they were added previously.\r\n\r\n### Android\r\n\r\n* ####React Native < 0.29 (Using rnpm)\r\n\r\n  `rnpm install react-native-material-kit`\r\n  \r\n* ####React Native >= 0.29\r\n  `$npm install -S react-native-material-kit`\r\n\r\n  `$react-native link react-native-material-kit`\r\n\r\n#### Manually\r\n1. JDK 7+ is required\r\n1. Add the following snippet to your `android/settings.gradle`:\r\n  ```gradle\r\n  include ':RNMaterialKit'\r\n  project(':RNMaterialKit').projectDir = file('../node_modules/react-native-material-kit/android')\r\n\r\n  ```\r\n1. Declare the dependency in your `android/app/build.gradle`\r\n  ```gradle\r\n  dependencies {\r\n      ...\r\n      compile project(':RNMaterialKit')\r\n  }\r\n\r\n  ```\r\n1. Import `com.github.xinthink.rnmk.ReactMaterialKitPackage` and register it in your `MainActivity` (or equivalent, RN >= 0.32 MainApplication.java):\r\n\r\n  ```java\r\n  @Override\r\n  protected List<ReactPackage> getPackages() {\r\n      return Arrays.asList(\r\n              new MainReactPackage(),\r\n              new ReactMaterialKitPackage()\r\n      );\r\n  }\r\n  ```\r\n\r\nFinally, you're good to go, feel free to require `react-native-material-kit` in your JS files.\r\n\r\nHave fun! :metal:\r\n\r\n## Resources\r\n- [Release Notes]\r\n- Refer to the [Annotated Source][docs] as API docs\r\n- Source code of [Demo app][]\r\n- For contributors, please refer to [How to debug local RNMK module][debug-with-demo]\r\n- Chat about bugs/features on [Gitter][gitter-rnmk]\r\n\r\n[docs]: http://xinthink.github.io/react-native-material-kit/docs/index.html\r\n[Demo app]: https://github.com/xinthink/rnmk-demo\r\n[debug-with-demo]: https://github.com/xinthink/rnmk-demo#debugging-local-rnmk-module\r\n[Release Notes]: https://github.com/xinthink/react-native-material-kit/releases\r\n\r\n## Components\r\n- [Buttons](#buttons)\r\n- [Cards](#cards)\r\n- [Loading](#loading)\r\n  - [Progress bar](#progress-bar)\r\n  - [Spinner](#spinner)\r\n- [Sliders](#sliders)\r\n  - [Range Slider](#range-slider)\r\n- [Textfields](#text-fields)\r\n- [Toggles](#toggles)\r\n  - [Checkbox](#checkbox)\r\n  - [Radio button](#radio-button)\r\n  - [Icon toggle](#icon-toggle)\r\n  - [Switch](#switch)\r\n\r\n### Buttons\r\n\r\n[![img-buttons]][mdl-buttons]\r\n\r\nApply [Material Design Buttons][mdl-buttons] with a few lines of code using predefined builders, which comply with the [Material Design Lite default theme][mdl-theme].\r\n\r\n```jsx\r\n// colored button with default theme (configurable)\r\nconst ColoredRaisedButton = MKButton.coloredButton()\r\n  .withText('BUTTON')\r\n  .withOnPress(() => {\r\n    console.log(\"Hi, it's a colored button!\");\r\n  })\r\n  .build();\r\n\r\n...\r\n<ColoredRaisedButton />\r\n```\r\n\r\nAnd you can definitely build customized buttons from scratch.\r\n\r\nwith builder:\r\n\r\n```jsx\r\nconst CustomButton = new MKButton.Builder()\r\n  .withBackgroundColor(MKColor.Teal)\r\n  .withShadowRadius(2)\r\n  .withShadowOffset({width:0, height:2})\r\n  .withShadowOpacity(.7)\r\n  .withShadowColor('black')\r\n  .withOnPress(() => {\r\n    console.log('hi, raised button!');\r\n  })\r\n  .withTextStyle({\r\n    color: 'white',\r\n    fontWeight: 'bold',\r\n  })\r\n  .withText('RAISED BUTTON')\r\n  .build();\r\n\r\n...\r\n<CustomButton />\r\n```\r\n\r\nthe jsx equivalent:\r\n\r\n```jsx\r\n<MKButton\r\n  backgroundColor={MKColor.Teal}\r\n  shadowRadius={2}\r\n  shadowOffset={{width:0, height:2}}\r\n  shadowOpacity={.7}\r\n  shadowColor=\"black\"\r\n  onPress={() => {\r\n    console.log('hi, raised button!');\r\n  }}\r\n  >\r\n  <Text pointerEvents=\"none\"\r\n        style={{color: 'white', fontWeight: 'bold',}}>\r\n    RAISED BUTTON\r\n  </Text>\r\n</MKButton>\r\n```\r\n\r\n> For this time, [Shadows are unavailable on Android][android-issue-shadow]\r\n\r\n👉 [props reference][button-props-doc] and [example code][buttons-sample]\r\n\r\n> Why builders? See the ‘[Builder vs. configuration object][issue-3]’ discussion.\r\n\r\n[img-buttons]: https://cloud.githubusercontent.com/assets/390805/8888853/69f8d9f8-32f2-11e5-9823-c235ab8c0dd2.gif\r\n[mdl-buttons]: http://www.getmdl.io/components/index.html#buttons-section\r\n[mdl-theme]: http://www.getmdl.io/customize/index.html\r\n[buttons-sample]: https://github.com/xinthink/rnmk-demo/blob/master/app/buttons.js\r\n[issue-3]: https://github.com/xinthink/react-native-material-kit/issues/3\r\n[button-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Button.html#props\r\n[android-issue-shadow]: https://facebook.github.io/react-native/docs/known-issues.html#no-support-for-shadows-on-android\r\n\r\n### Cards\r\n[![img-cards]][cards-mdl]\r\n\r\nApply [`Card Style`][cards-mdl] with only few styles !.\r\n```jsx\r\nimport {\r\n  getTheme,\r\n  ...\r\n} from 'react-native-material-kit';\r\n\r\nconst theme = getTheme();\r\n\r\n<View style={theme.cardStyle}>\r\n  <Image source={{uri : base64Icon}} style={theme.cardImageStyle} />\r\n  <Text style={theme.cardTitleStyle}>Welcome</Text>\r\n  <Text style={theme.cardContentStyle}>\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n    Mauris sagittis pellentesque lacus eleifend lacinia...\r\n  </Text>\r\n  <View style={theme.cardMenuStyle}>{menu}</View>\r\n  <Text style={theme.cardActionStyle}>My Action</Text>\r\n</View>\r\n\r\n```\r\n\r\n👉 [example code][card-sample]\r\n\r\n[cards-mdl]: http://www.getmdl.io/components/index.html#cards-section\r\n[img-cards]: https://cloud.githubusercontent.com/assets/390805/10262736/4411994a-6a07-11e5-8a72-b7a46ba5e4a9.png\r\n[card-sample]: https://github.com/xinthink/rnmk-demo/blob/master/app/cards.js\r\n\r\n### Loading\r\n[MDL Loading][mdl-loading] components.\r\n\r\n#### Progress bar\r\n[![progress-demo]][mdl-loading]\r\n\r\n```jsx\r\n<mdl.Progress\r\n  style={styles.progress}\r\n  progress={0.2}\r\n/>\r\n```\r\n\r\n👉 [props reference][prog-props-doc] and [example code][progress-sample]\r\n\r\n#### Spinner\r\n[![spinner-demo]][mdl-loading]\r\n\r\n```jsx\r\n<mdl.Spinner />\r\n```\r\n\r\n👉 [props reference][spinner-props-doc] and [example code][progress-sample]\r\n\r\n[mdl-loading]: http://www.getmdl.io/components/index.html#loading-section\r\n[progress-demo]: https://cloud.githubusercontent.com/assets/390805/9288698/01e31432-4387-11e5-98e5-85b18471baeb.gif\r\n[spinner-demo]: https://cloud.githubusercontent.com/assets/390805/9291361/6e7a75bc-43ec-11e5-95be-2b33eb7f8734.gif\r\n[progress-sample]: https://github.com/xinthink/rnmk-demo/blob/master/app/progress.js\r\n[prog-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Progress.html#props\r\n[spinner-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Spinner.ios.html#props\r\n\r\n### Sliders\r\n[MDL Slider][mdl-slider] components.\r\n[![slider-demo]][mdl-slider]\r\n\r\n```jsx\r\n<mdl.Slider style={styles.slider} />\r\n…\r\nconst SliderWithValue = mdl.Slider.slider()\r\n  .withStyle(styles.slider)\r\n  .withMin(10)\r\n  .withMax(100)\r\n  .build();\r\n…\r\n<SliderWithValue\r\n  ref=“sliderWithValue”\r\n  onChange={(curValue) => this.setState({curValue})}\r\n/>\r\n```\r\n\r\n👉 [props reference][slider-props-doc] and [example code][slider-sample]\r\n\r\n### Range Slider\r\n![range-slider-demo]\r\n\r\n```jsx\r\n<mdl.RangeSlider style={styles.slider} />\r\n…\r\nconst SliderWithRange = mdl.RangeSlider.slider()\r\n  .withStyle(styles.slider)\r\n  .withMin(10)\r\n  .withMax(100)\r\n  .withMinValue(30)\r\n  .withMaxValue(50)\r\n  .build();\r\n…\r\n<SliderWithRange\r\n  ref=“sliderWithRange”\r\n  onChange={(curValue) => this.setState({\r\n    min: curValue.min,\r\n    max: curValue.max,\r\n    })\r\n  }\r\n  onConfirm={(curValue) => {\r\n    console.log(\"Slider drag ended\");\r\n    console.log(curValue);\r\n  }}\r\n/>\r\n```\r\n\r\n👉 [props reference][range-slider-props-doc] and [example code][slider-sample]\r\n\r\n[mdl-slider]: http://www.getmdl.io/components/index.html#sliders-section\r\n[slider-demo]: https://cloud.githubusercontent.com/assets/390805/10123318/6c502e6e-6569-11e5-924a-62c8b850511c.gif\r\n[range-slider-demo]: https://cloud.githubusercontent.com/assets/16245422/12763284/63a2dafc-c9a8-11e5-8fde-37b6f42a60c2.gif\r\n[slider-sample]: https://github.com/xinthink/rnmk-demo/blob/master/app/sliders.js\r\n[slider-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Slider.html#props\r\n[range-slider-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/RangeSlider.html#props\r\n\r\n### Text Fields\r\n\r\nBuilt-in textfields, which comply with [Material Design Lite][mdl-tf].\r\n\r\n[![img-tf]][mdl-tf]\r\n\r\n```jsx\r\n// textfield with default theme (configurable)\r\nconst Textfield = MKTextField.textfield()\r\n  .withPlaceholder('Text...')\r\n  .withStyle(styles.textfield)\r\n  .build();\r\n\r\n...\r\n<Textfield />\r\n```\r\n\r\nCustomizing textfields through builder:\r\n\r\n```jsx\r\nconst CustomTextfield = mdl.Textfield.textfield()\r\n  .withPlaceholder(‘Text…’)\r\n  .withStyle(styles.textfield)\r\n  .withTintColor(MKColor.Lime)\r\n  .withTextInputStyle({color: MKColor.Orange})\r\n  .build();\r\n...\r\n<CustomTextfield />\r\n```\r\n\r\nthe jsx equivalent:\r\n\r\n```jsx\r\n<MKTextField\r\n  tintColor={MKColor.Lime}\r\n  textInputStyle={{color: MKColor.Orange}}\r\n  placeholder=“Text…”\r\n  style={styles.textfield}\r\n/>\r\n```\r\n\r\n👉 [props reference][tf-props-doc] and [example code][tf-sample]\r\n\r\n[mdl-tf]: http://www.getmdl.io/components/#textfields-section\r\n[img-tf]: https://cloud.githubusercontent.com/assets/390805/9085678/8280484a-3bb1-11e5-9354-a244b0520736.gif\r\n[tf-sample]: https://github.com/xinthink/rnmk-demo/blob/master/app/textfields.js\r\n[tf-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Textfield.html#props\r\n\r\n### Toggles\r\n\r\n[Icon toggle][mdl-icon-toggle] & [Switch][mdl-switch]\r\n[![img-toggles]][mdl-toggles]\r\n\r\n[mdl-toggles]: http://www.getmdl.io/components/index.html#toggles-section\r\n[mdl-icon-toggle]: http://www.getmdl.io/components/index.html#toggles-section/icon-toggle\r\n[mdl-switch]: http://www.getmdl.io/components/index.html#toggles-section/switch\r\n[img-toggles]: https://cloud.githubusercontent.com/assets/390805/8903074/de0ed748-3487-11e5-9448-9ee304e0a6b6.gif\r\n\r\n#### Icon toggle\r\n\r\n```jsx\r\n<MKIconToggle\r\n  checked={true}\r\n  onCheckedChange={this._onIconChecked}\r\n  onPress={this._onIconClicked}\r\n>\r\n  <Text\r\n    pointerEvents=\"none\"\r\n    style={styles.toggleTextOff}>Off</Text>\r\n  <Text state_checked={true}\r\n        pointerEvents=\"none\"\r\n        style={[styles.toggleText, styles.toggleTextOn]}>On</Text>\r\n</MKIconToggle>\r\n```\r\n\r\nThe two `Text` tags here, similar to [State List][android-state-list] in *Android* development, which can give you the flexibility to decide what content and how it is shown for each state of the toggle. For example, you can use [react-native-icons][rn-icons] here, or any other sophisticated contents.\r\n\r\n👉 [props reference][icon-toggle-props-doc] and [example code][toggles-sample]\r\n\r\n[android-state-list]: http://developer.android.com/guide/topics/resources/drawable-resource.html#StateList\r\n[rn-icons]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Switch.html\r\n[icon-toggle-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/MKIconToggle.html#props\r\n\r\n#### Switch\r\n\r\n```jsx\r\n<mdl.Switch\r\n  style={styles.appleSwitch}\r\n  onColor=\"rgba(255,152,0,.3)\"\r\n  thumbOnColor={MKColor.Orange}\r\n  rippleColor=\"rgba(255,152,0,.2)\"\r\n  onPress={() => console.log('orange switch pressed')}\r\n  onCheckedChange={(e) => console.log('orange switch checked', e)}\r\n/>\r\n```\r\n\r\n👉 [props reference][switch-js-props-doc] and [example code][toggles-sample]\r\n\r\n[toggles-sample]: https://github.com/xinthink/rnmk-demo/blob/master/app/toggles.js\r\n[switch-js-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Switch.html#props\r\n\r\n#### Checkbox\r\n\r\n[![img-checkbox]][mdl-checkbox]\r\n\r\n```jsx\r\n<MKCheckbox\r\n  checked={true}\r\n/>\r\n```\r\n\r\nYou can customize the styles by changing the global theme, which affects all checkboxes across the whole app.\r\n\r\n```js\r\nsetTheme({checkboxStyle: {\r\n  fillColor: MKColor.Teal,\r\n  borderOnColor: MKColor.Teal,\r\n  borderOffColor: MKColor.Teal,\r\n  rippleColor: `rgba(${MKColor.RGBTeal},.15)`,\r\n}});\r\n```\r\n\r\n👉 [props reference][checkbox-props-doc] and [example code][toggles-sample]\r\n\r\n[mdl-checkbox]: http://www.getmdl.io/components/index.html#toggles-section/checkbox\r\n[img-checkbox]: https://cloud.githubusercontent.com/assets/390805/12009445/0f938cee-acb2-11e5-9732-434382f6cd84.gif\r\n[checkbox-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/Checkbox.html#props\r\n\r\n\r\n#### Radio button\r\n\r\n[![img-radio]][mdl-radio]\r\n\r\n```jsx\r\nconstructor() {\r\n  super();\r\n  this.radioGroup = new MKRadioButton.Group();\r\n}\r\n...\r\n<MKRadioButton\r\n  checked={true}\r\n  group={this.radioGroup}\r\n/>\r\n```\r\n\r\nYou can customize the styles by changing the global theme, which affects all radio buttons across the whole app.\r\n\r\n```js\r\nsetTheme({radioStyle: {\r\n  fillColor: `rgba(${MKColor.RGBTeal},.8)`,\r\n  borderOnColor: `rgba(${MKColor.RGBTeal},.6)`,\r\n  borderOffColor: `rgba(${MKColor.RGBTeal},.3)`,\r\n  rippleColor: `rgba(${MKColor.RGBTeal},.15)`,\r\n}});\r\n```\r\n\r\n👉 [props reference][radio-props-doc] and [example code][toggles-sample]\r\n\r\n[mdl-radio]: http://www.getmdl.io/components/index.html#toggles-section/radio\r\n[img-radio]: https://cloud.githubusercontent.com/assets/390805/10442805/bdb08bc0-7188-11e5-8565-4ee0049ad590.gif\r\n[radio-props-doc]: http://www.xinthink.com/react-native-material-kit/docs/lib/mdl/RadioButton.html#props\r\n\r\n\r\n## About\r\nThis project is inspired by [MaterialKit][], thanks [@nghialv][] for the great work!👍🖖\r\n\r\nBut I rewrote almost all the components in JSX, with limited help of native code.\r\n\r\nAnd lastly, it’s lots of work to be done, ***contributions*** are welcome!🎉🍻\r\n\r\n[@nghialv]: https://github.com/nghialv\r\n[MaterialKit]: https://github.com/nghialv/MaterialKit\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/xinthink/react-native-material-kit.git"
  },
  "scripts": {
    "lint": "eslint lib"
  },
  "version": "0.3.2"
}
